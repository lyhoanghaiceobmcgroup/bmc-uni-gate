import { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { F2HoldingView } from "./F2HoldingView";
import { F3CompanyView } from "./F3CompanyView";
import { AutoTieringSystem } from "../AutoTieringSystem";
import { DataEntryForms } from "../DataEntryForms";
import { supabase } from "@/lib/supabase";
import { useAuth } from "@/contexts/AuthContext";
import { useToast } from "@/hooks/use-toast";
import { 
  Building2, 
  TrendingUp, 
  Users, 
  DollarSign, 
  Target, 
  Package, 
  AlertTriangle, 
  FileText,
  Settings,
  Plus,
  Download,
  Search,
  Filter,
  BarChart3,
  PieChart,
  ArrowRight,
  Briefcase,
  MapPin,
  Calendar,
  Percent,
  Zap,
  Database
} from "lucide-react";
import { useNavigate } from "react-router-dom";

interface CompanyManagementViewProps {
  organizations: any[];
}

export function CompanyManagementView({ organizations }: CompanyManagementViewProps) {
  const [selectedTimeframe, setSelectedTimeframe] = useState("month");
  const [selectedCompany, setSelectedCompany] = useState<any>(null);
  const [viewMode, setViewMode] = useState("overview");
  const [loading, setLoading] = useState(true);
  const [dbOrganizations, setDbOrganizations] = useState<any[]>([]);
  const { user } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const getButtonVariant = (mode: string) => {
    return viewMode === mode ? "default" : "outline";
  };

  // Load organizations from database
  useEffect(() => {
    loadOrganizations();
  }, [user]);

  const loadOrganizations = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('user_organization_roles')
        .select(`
          role,
          organizations (*)
        `)
        .eq('user_id', user.id);

      if (error) throw error;

      setDbOrganizations(data || []);
    } catch (error) {
      console.error('Error loading organizations:', error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¥ng ty t·ª´ database",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Filter F2 and F3 companies from database
  const { f2Companies, f3Companies, allCompanies } = useMemo(() => {
    const f2 = dbOrganizations
      .filter(org => org.organizations?.level === 'F2')
      .map(org => ({
        id: org.organizations.id,
        name: org.organizations.name,
        level: 'F2',
        type: 'holding_company',
        sector: org.organizations.industry || 'Ch∆∞a x√°c ƒë·ªãnh',
        bmcOwnership: org.organizations.bmc_equity_percentage || 0,
        revenue: 0, // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ b√°o c√°o
        profit: 0,
        employees: 0,
        avgKPI: 0,
        complianceScore: 0,
        establishedDate: org.organizations.created_at,
        code: org.organizations.code
      }));
    
    const f3 = dbOrganizations
      .filter(org => org.organizations?.level === 'F3')
      .map(org => ({
        id: org.organizations.id,
        name: org.organizations.name,
        level: 'F3',
        type: 'strategic_company',
        sector: org.organizations.industry || 'Ch∆∞a x√°c ƒë·ªãnh',
        bmcOwnership: org.organizations.bmc_equity_percentage || 0,
        revenue: 0, // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ b√°o c√°o
        profit: 0,
        employees: 0,
        avgKPI: 0,
        complianceScore: 0,
        establishedDate: org.organizations.created_at,
        code: org.organizations.code
      }));
    
    return {
      f2Companies: f2,
      f3Companies: f3,
      allCompanies: [...f2, ...f3]
    };
  }, [dbOrganizations]);
  
  const totalMetrics = {
    totalRevenue: allCompanies.reduce((sum, c) => sum + c.revenue, 0),
    totalProfit: allCompanies.reduce((sum, c) => sum + c.profit, 0), 
    totalEmployees: allCompanies.reduce((sum, c) => sum + c.employees, 0),
    avgKPI: allCompanies.length > 0 ? Math.round(allCompanies.reduce((sum, c) => sum + c.avgKPI, 0) / allCompanies.length) : 0,
    avgCompliance: allCompanies.length > 0 ? Math.round(allCompanies.reduce((sum, c) => sum + c.complianceScore, 0) / allCompanies.length) : 0,
    avgBMCOwnership: allCompanies.length > 0 ? Math.round(allCompanies.reduce((sum, c) => sum + c.bmcOwnership, 0) / allCompanies.length) : 0
  };

  // Render specific views based on mode
  if (viewMode === "f2-holding") {
    return <F2HoldingView holdingData={f2Companies[0]} onBack={() => setViewMode("overview")} />;
  }
  
  if (viewMode === "f3-companies") {
    return <F3CompanyView companyData={f3Companies[0]} onBack={() => setViewMode("overview")} />;
  }
  
  if (viewMode === "auto-tiering") {
    const tieringData = {
      id: "f2-f3-consolidated",
      name: "F2-F3 Company Management",
      level: "F2-F3",
      bmcOwnership: totalMetrics.avgBMCOwnership,
      kpiAverage4Quarters: totalMetrics.avgKPI,
      autoTieringStatus: "Active monitoring",
      nextTierTarget: "F1",
      tieringProgress: totalMetrics.avgBMCOwnership
    };
    return <AutoTieringSystem entityData={tieringData} />;
  }
  
  if (viewMode === "data-entry") {
    return <DataEntryForms entityLevel="F4" entityName="Company Management" />;
  }

  if (selectedCompany) {
    return <CompanyDetailDashboard company={selectedCompany} onBack={() => setSelectedCompany(null)} />;
  }

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">üè¢ Qu·∫£n Tr·ªã C√¥ng Ty F2-F3</h1>
          <p className="text-muted-foreground mt-2">
            Trung t√¢m qu·∫£n tr·ªã & theo d√µi realtime to√†n b·ªô c√¥ng ty th√†nh vi√™n - Auto-Tiering theo m·ªëc c·ªï ph·∫ßn
          </p>
          <div className="flex items-center space-x-4 mt-3">
            <Badge variant="secondary" className="text-sm">
              üè¨ {f2Companies.length} F2 Holdings
            </Badge>
            <Badge variant="secondary" className="text-sm">
              üè¢ {f3Companies.length} F3 Strategic
            </Badge>
            <Badge variant="outline" className="text-sm">
              üí∞ {totalMetrics.totalRevenue} t·ª∑ VNƒê total revenue
            </Badge>
            {loading && (
              <Badge variant="outline" className="text-sm animate-pulse">
                üîÑ ƒêang t·∫£i d·ªØ li·ªáu...
              </Badge>
            )}
          </div>
        </div>
        <div className="flex items-center space-x-3">
          <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="day">Ng√†y</SelectItem>
              <SelectItem value="week">Tu·∫ßn</SelectItem>
              <SelectItem value="month">Th√°ng</SelectItem>
              <SelectItem value="quarter">Qu√Ω</SelectItem>
              <SelectItem value="year">NƒÉm</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="outline" size="sm">
            <Filter className="h-4 w-4 mr-2" />
            B·ªô l·ªçc
          </Button>
        </div>
      </div>

      {/* Navigation Bar cho F2-F3 */}
      <div className="bg-card p-4 rounded-lg border">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Button 
              variant={viewMode === "overview" ? "default" : "outline"} 
              size="sm"
              onClick={() => setViewMode("overview")}
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              üìä T·ªïng quan
            </Button>
            <Button 
              variant={getButtonVariant("f2-holding") as "default" | "outline"} 
              size="sm"
              onClick={() => setViewMode("f2-holding")}
            >
              <Building2 className="h-4 w-4 mr-2" />
              üè¨ F2 Holdings
            </Button>
            <Button 
              variant={getButtonVariant("f3-companies") as "default" | "outline"} 
              size="sm"
              onClick={() => setViewMode("f3-companies")}
            >
              <Briefcase className="h-4 w-4 mr-2" />
              üè¢ F3 Strategic
            </Button>
            <Button 
              variant={getButtonVariant("auto-tiering") as "default" | "outline"} 
              size="sm"
              onClick={() => setViewMode("auto-tiering")}
            >
              <Zap className="h-4 w-4 mr-2" />
              üéØ Auto-Tiering
            </Button>
            <Button 
              variant={getButtonVariant("data-entry") as "default" | "outline"} 
              size="sm"
              onClick={() => setViewMode("data-entry")}
            >
              <Database className="h-4 w-4 mr-2" />
              üìù Nh·∫≠p li·ªáu
            </Button>
          </div>
          <div className="flex items-center space-x-3">
            <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>
              <SelectTrigger className="w-28">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="month">Th√°ng</SelectItem>
                <SelectItem value="quarter">Qu√Ω</SelectItem>
                <SelectItem value="year">NƒÉm</SelectItem>
              </SelectContent>
            </Select>
            <Button variant="default" size="sm">
              <Search className="h-4 w-4 mr-2" />
              ü§ñ AI Query
            </Button>
          </div>
        </div>
      </div>

      {/* Overview Cards - D·ªØ li·ªáu th·ª±c t·ª´ mockup */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">T·ªïng Doanh Thu F2-F3</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalMetrics.totalRevenue} t·ª∑ VNƒê</div>
            <p className="text-xs text-muted-foreground">
              <TrendingUp className="inline h-3 w-3 mr-1" />
              F2: 210 t·ª∑ | F3: {totalMetrics.totalRevenue - 210} t·ª∑
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              üí° F&B Holding d·∫´n ƒë·∫ßu v·ªõi 210 t·ª∑
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">L·ª£i Nhu·∫≠n H·ª£p Nh·∫•t</CardTitle>
            <Target className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalMetrics.totalProfit} t·ª∑ VNƒê</div>
            <p className="text-xs text-muted-foreground">
              T·ª∑ su·∫•t: {((totalMetrics.totalProfit / totalMetrics.totalRevenue) * 100).toFixed(1)}%
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              üí° F3 GAJ Jewelry margin cao nh·∫•t 25.6%
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">T·ªïng Nh√¢n L·ª±c</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalMetrics.totalEmployees.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">
              KPI TB: {totalMetrics.avgKPI} | Compliance: {totalMetrics.avgCompliance}
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              üí° F3 Tech Solutions KPI cao nh·∫•t
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">BMC Ownership</CardTitle>
            <Percent className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">Ki·ªÉm so√°t</div>
            <p className="text-xs text-muted-foreground">
              F2: M·∫°nh | F3 TB: ·ªîn ƒë·ªãnh
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              üí° F2 F&B s·∫µn s√†ng thƒÉng F1
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Visual Analytics */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center">
              <BarChart3 className="h-5 w-5 mr-2" />
              Bi·ªÉu ƒê·ªì T√†i Ch√≠nh H·ª£p Nh·∫•t
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64 bg-muted/20 rounded-lg flex items-center justify-center">
              <div className="text-center">
                <BarChart3 className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <p className="text-muted-foreground">Bi·ªÉu ƒë·ªì Doanh thu - Chi ph√≠ - L·ª£i nhu·∫≠n theo th√°ng</p>
                <p className="text-xs text-muted-foreground mt-2">D·ªØ li·ªáu t·ª´ {allCompanies.length} c√¥ng ty th√†nh vi√™n</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <PieChart className="h-5 w-5 mr-2" />
              Auto-Tiering Progress
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {allCompanies.length > 0 ? (
                allCompanies.map((company, index) => {
                  const tieringProgress = company.bmcOwnership || 0;
                  const isEligible = tieringProgress >= 50;
                  const statusColor = isEligible ? "text-green-600" : tieringProgress >= 30 ? "text-amber-600" : "text-blue-600";
                  const statusIcon = isEligible ? "‚úÖ" : tieringProgress >= 30 ? "‚è≥" : "üìà";
                  
                  return (
                    <div key={company.id}>
                      <div className="flex justify-between text-sm">
                        <span>{company.level === "F2" ? "üè¨" : "üè¢"} {company.name} ‚Üí {company.level === "F2" ? "F1" : "F2"}</span>
                        <span className={statusColor}>{Math.round(tieringProgress)}% {statusIcon}</span>
                      </div>
                      <Progress value={tieringProgress} className="h-2" />
                      <p className="text-xs text-muted-foreground mt-1">
                        {isEligible ? "ƒê·∫°t ng∆∞·ª°ng thƒÉng c·∫•p" : `C·∫ßn th√™m ${Math.round(50 - tieringProgress)}% ƒë·ªÉ ƒë·∫°t ng∆∞·ª°ng`}
                      </p>
                    </div>
                  );
                })
              ) : (
                <div className="text-center py-8">
                  <div className="text-muted-foreground mb-2">üìä</div>
                  <p className="text-sm text-muted-foreground">Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng ty ƒë·ªÉ hi·ªÉn th·ªã ti·∫øn ƒë·ªô Auto-Tiering</p>
                  <p className="text-xs text-muted-foreground mt-1">Th√™m c√¥ng ty ƒë·ªÉ theo d√µi ti·∫øn ƒë·ªô thƒÉng c·∫•p t·ª± ƒë·ªông</p>
                </div>
              )}
              <div className="pt-2 border-t">
                <Button size="sm" className="w-full" onClick={() => setViewMode("auto-tiering")}>
                  üéØ Xem chi ti·∫øt Auto-Tiering
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Companies List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center">
              <Building2 className="h-5 w-5 mr-2" />
              Danh S√°ch C√¥ng Ty Th√†nh Vi√™n ({allCompanies.length})
              {loading && <span className="ml-2 text-sm text-muted-foreground animate-pulse">üîÑ</span>}
            </div>
            <Button size="sm" disabled={loading}>
              <Plus className="h-4 w-4 mr-2" />
              Th√™m c√¥ng ty
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
                <p className="text-muted-foreground">ƒêang t·∫£i danh s√°ch c√¥ng ty t·ª´ database...</p>
              </div>
            ) : allCompanies.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground mb-4">
                  <Building2 className="w-16 h-16 mx-auto" />
                </div>
                <h4 className="text-lg font-medium mb-2">Ch∆∞a c√≥ c√¥ng ty n√†o</h4>
                <p className="text-muted-foreground mb-4">Hi·ªán t·∫°i ch∆∞a c√≥ c√¥ng ty F2 ho·∫∑c F3 n√†o trong h·ªá th·ªëng.</p>
                <Button onClick={() => setViewMode("data-entry")}>
                  <Plus className="h-4 w-4 mr-2" />
                  Th√™m C√¥ng Ty M·ªõi
                </Button>
              </div>
            ) : (
              allCompanies.map((company, index) => (
              <div key={company.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors">
                <div className="flex items-center space-x-4">
                  <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${
                    company.level === 'F2' ? 'bg-blue-50 dark:bg-blue-950/20' : 'bg-green-50 dark:bg-green-950/20'
                  }`}>
                    {company.level === 'F2' ? (
                      <Building2 className="h-6 w-6 text-blue-600" />
                    ) : (
                      <Briefcase className="h-6 w-6 text-green-600" />
                    )}
                  </div>
                  <div>
                    <h3 className="font-semibold">{company.name}</h3>
                    <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                      <span className="flex items-center">
                        <Badge variant={company.level === 'F2' ? 'default' : 'secondary'} className="mr-2">
                          {company.level}
                        </Badge>
                        {company.type}
                      </span>
                      <span className="flex items-center">
                        <MapPin className="h-3 w-3 mr-1" />
                        {company.sector}
                      </span>
                      <span className="text-xs">
                        BMC: {company.bmcOwnership}%
                      </span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-6 text-sm">
                  <div className="text-center">
                    <div className="font-semibold">{company.revenue} t·ª∑</div>
                    <div className="text-muted-foreground">Doanh thu</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold">{company.profit} t·ª∑</div>
                    <div className="text-muted-foreground">L·ª£i nhu·∫≠n</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold">{company.avgKPI}%</div>
                    <div className="text-muted-foreground">KPI</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold">{company.employees}</div>
                    <div className="text-muted-foreground">Nh√¢n s·ª±</div>
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => company.level === 'F2' ? setViewMode('f2-holding') : setViewMode('f3-companies')}
                  >
                    Xem chi ti·∫øt
                    <ArrowRight className="h-4 w-4 ml-2" />
                  </Button>
                </div>
              </div>
              ))
            )}
          </div>
        </CardContent>
      </Card>

      {/* AI Insights */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <span className="mr-2">ü§ñ</span>
            AI Ph√¢n T√≠ch & G·ª£i √ù
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg border-l-4 border-blue-500">
              <h4 className="font-semibold text-blue-900 dark:text-blue-100">üìä AI T√≥m T·∫Øt H·ªá Sinh Th√°i F2-F3 (Realtime)</h4>
              <p className="text-blue-800 dark:text-blue-200 mt-2">
                {allCompanies.length > 0 ? (
                  `"H·ªá th·ªëng ƒëang qu·∫£n l√Ω ${allCompanies.length} c√¥ng ty th√†nh vi√™n (${f2Companies.length} F2 Holdings, ${f3Companies.length} F3 Strategic). 
                  T·ªïng doanh thu ${totalMetrics.totalRevenue.toLocaleString()} t·ª∑ VNƒê. 
                  L·ª£i nhu·∫≠n h·ª£p nh·∫•t ${totalMetrics.totalProfit.toLocaleString()} t·ª∑ VNƒê. 
                  T·ªïng nh√¢n l·ª±c ${totalMetrics.totalEmployees.toLocaleString()} ng∆∞·ªùi v·ªõi KPI TB ${totalMetrics.avgKPI}%. 
                  BMC ownership trung b√¨nh ${totalMetrics.avgBMCOwnership}%."`
                ) : (
                  loading ? "üîÑ ƒêang t·∫£i d·ªØ li·ªáu c√¥ng ty t·ª´ database..." : "üìä Ch∆∞a c√≥ c√¥ng ty F2-F3 n√†o trong h·ªá th·ªëng. Vui l√≤ng th√™m c√¥ng ty ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω."
                )}
              </p>
            </div>
            
            <div className="p-4 bg-amber-50 dark:bg-amber-950/20 rounded-lg border-l-4 border-amber-500">
              <h4 className="font-semibold text-amber-900 dark:text-amber-100">‚ö†Ô∏è AI C·∫£nh B√°o Auto-Tiering (Live Monitor)</h4>
              <p className="text-amber-800 dark:text-amber-200 mt-2">
                {allCompanies.length > 0 ? (
                  `üö® H·ªá th·ªëng ƒëang theo d√µi ${allCompanies.length} c√¥ng ty th√†nh vi√™n. 
                  Compliance score trung b√¨nh: ${totalMetrics.avgCompliance}%. 
                  S·∫µn s√†ng cho vi·ªác ƒë√°nh gi√° Auto-Tiering khi c√≥ ƒë·ªß d·ªØ li·ªáu c·ªï ph·∫ßn BMC.`
                ) : (
                  "üìä Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng ty ƒë·ªÉ th·ª±c hi·ªán Auto-Tiering. Vui l√≤ng th√™m c√¥ng ty ƒë·ªÉ b·∫Øt ƒë·∫ßu theo d√µi."
                )}
              </p>
            </div>

            <div className="p-4 bg-green-50 dark:bg-green-950/20 rounded-lg border-l-4 border-green-500">
              <h4 className="font-semibold text-green-900 dark:text-green-100">üí° AI G·ª£i √ù Chi·∫øn L∆∞·ª£c (Data-Driven)</h4>
              <p className="text-green-800 dark:text-green-200 mt-2">
                {allCompanies.length > 0 ? (
                  `üéØ H·ªá th·ªëng AI ƒëang ph√¢n t√≠ch ${allCompanies.length} c√¥ng ty th√†nh vi√™n. 
                  üí∞ ROI trung b√¨nh: ${totalMetrics.avgROI}%, KPI trung b√¨nh: ${totalMetrics.avgKPI}%. 
                  üìà S·∫µn s√†ng ƒë∆∞a ra g·ª£i √Ω chi·∫øn l∆∞·ª£c khi c√≥ ƒë·ªß d·ªØ li·ªáu ph√¢n t√≠ch.`
                ) : (
                  "ü§ñ AI ch·ªù d·ªØ li·ªáu c√¥ng ty ƒë·ªÉ ph√¢n t√≠ch v√† ƒë∆∞a ra g·ª£i √Ω chi·∫øn l∆∞·ª£c t·ªëi ∆∞u. Vui l√≤ng th√™m c√¥ng ty ƒë·ªÉ b·∫Øt ƒë·∫ßu."
                )}
              </p>
            </div>
            
            <div className="p-4 bg-purple-50 dark:bg-purple-950/20 rounded-lg border-l-4 border-purple-500">
              <h4 className="font-semibold text-purple-900 dark:text-purple-100">üîÑ Realtime Department Sync</h4>
              <p className="text-purple-800 dark:text-purple-200 mt-2">
                {allCompanies.length > 0 ? (
                  `üìä Sales: T·ªïng revenue ${totalMetrics.totalRevenue.toLocaleString()} t·ª∑ VNƒê. Finance: ROI TB ${totalMetrics.avgROI}%. 
                  üë• HR: ${totalMetrics.totalEmployees.toLocaleString()} nh√¢n s·ª± t·ª´ ${allCompanies.length} c√¥ng ty th√†nh vi√™n. 
                  üéØ Auto-sync t·ª´ c√°c ph√≤ng ban BMC Holdings ƒëang ho·∫°t ƒë·ªông.`
                ) : (
                  "üîÑ H·ªá th·ªëng sync s·∫µn s√†ng k·∫øt n·ªëi v·ªõi c√°c ph√≤ng ban khi c√≥ d·ªØ li·ªáu c√¥ng ty. Vui l√≤ng th√™m c√¥ng ty ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô."
                )}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons F2-F3 */}
      <div className="flex justify-center space-x-4">
        <Button variant="default" onClick={() => setViewMode("f2-holding")}>
          <Building2 className="h-4 w-4 mr-2" />
          üè¨ F2 Holdings
        </Button>
        <Button variant="outline" onClick={() => setViewMode("f3-companies")}>
          <Briefcase className="h-4 w-4 mr-2" />
          üè¢ F3 Strategic
        </Button>
        <Button variant="outline" onClick={() => setViewMode("auto-tiering")}>
          <Zap className="h-4 w-4 mr-2" />
          üéØ Auto-Tiering
        </Button>
        <Button variant="outline" onClick={() => setViewMode("data-entry")}>
          <Database className="h-4 w-4 mr-2" />
          üìù Nh·∫≠p li·ªáu 9 PB
        </Button>
        <Button variant="outline" onClick={() => navigate('/consolidated-report')}>
          <Download className="h-4 w-4 mr-2" />
          üìä B√°o c√°o h·ª£p nh·∫•t
        </Button>
      </div>
    </div>
  );
}

// Detailed Company Dashboard Component
function CompanyDetailDashboard({ company, onBack }: { company: any; onBack: () => void }) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <Button variant="outline" onClick={onBack} className="mb-4">
            ‚Üê Quay l·∫°i danh s√°ch
          </Button>
          <h1 className="text-3xl font-bold">{company.organizations?.name}</h1>
          <p className="text-muted-foreground">Chi ti·∫øt qu·∫£n tr·ªã c√¥ng ty th√†nh vi√™n</p>
        </div>
      </div>

      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-9">
          <TabsTrigger value="overview">T·ªïng quan</TabsTrigger>
          <TabsTrigger value="finance">T√†i ch√≠nh</TabsTrigger>
          <TabsTrigger value="hr">Nh√¢n s·ª±</TabsTrigger>
          <TabsTrigger value="sales">Kinh doanh</TabsTrigger>
          <TabsTrigger value="warehouse">Kho v·∫≠n</TabsTrigger>
          <TabsTrigger value="legal">Ph√°p ch·∫ø</TabsTrigger>
          <TabsTrigger value="tech">C√¥ng ngh·ªá</TabsTrigger>
          <TabsTrigger value="rd">R&D</TabsTrigger>
          <TabsTrigger value="investment">ƒê·∫ßu t∆∞</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Company Overview Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">V·ªën G√≥p BMC</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">25 t·ª∑ VNƒê</div>
                <p className="text-xs text-muted-foreground">T·ª∑ l·ªá: 65%</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">Doanh Thu</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">45 t·ª∑ VNƒê</div>
                <p className="text-xs text-muted-foreground">+8% th√°ng tr∆∞·ªõc</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">L·ª£i Nhu·∫≠n</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">12 t·ª∑ VNƒê</div>
                <p className="text-xs text-muted-foreground">T·ª∑ su·∫•t: 26%</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">KPI C√¥ng Ty</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">85%</div>
                <p className="text-xs text-muted-foreground">Nh√¢n s·ª±: 120 ng∆∞·ªùi</p>
              </CardContent>
            </Card>
          </div>

          {/* Departments Overview */}
          <Card>
            <CardHeader>
              <CardTitle>T√¨nh H√¨nh Ph√≤ng Ban</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {[
                  { name: "T√†i ch√≠nh", kpi: 94, staff: 5, status: "T·ªët" },
                  { name: "K·∫ø to√°n", kpi: 96, staff: 4, status: "Xu·∫•t s·∫Øc" },
                  { name: "Nh√¢n s·ª±", kpi: 96, staff: 4, status: "Xu·∫•t s·∫Øc" },
                  { name: "ƒê√†o t·∫°o", kpi: 92, staff: 3, status: "T·ªët" },
                  { name: "Kinh doanh", kpi: 95, staff: 25, status: "Xu·∫•t s·∫Øc" },
                  { name: "Marketing", kpi: 78, staff: 12, status: "C·∫ßn c·∫£i thi·ªán" },
                  { name: "S·∫£n xu·∫•t", kpi: 88, staff: 12, status: "T·ªët" },
                  { name: "Kho v·∫≠n", kpi: 91, staff: 8, status: "T·ªët" },
                  { name: "Ph√°p ch·∫ø", kpi: 90, staff: 4, status: "T·ªët" }
                ].map((dept, index) => (
                  <div key={index} className="p-4 border rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-semibold">{dept.name}</h4>
                      <Badge variant={dept.status === "Xu·∫•t s·∫Øc" ? "default" : dept.status === "T·ªët" ? "secondary" : "destructive"}>
                        {dept.status}
                      </Badge>
                    </div>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>KPI:</span>
                        <span className="font-medium">{dept.kpi}%</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>Nh√¢n s·ª±:</span>
                        <span>{dept.staff} ng∆∞·ªùi</span>
                      </div>
                      <Progress value={dept.kpi} className="h-2" />
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Other tabs would have similar detailed content for each department */}
        <TabsContent value="finance">
          <Card>
            <CardHeader>
              <CardTitle>Chi Ti·∫øt T√†i Ch√≠nh</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">N·ªôi dung chi ti·∫øt v·ªÅ t√†i ch√≠nh c√¥ng ty...</p>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Add other TabsContent for hr, sales, warehouse, legal, tech, rd, investment */}
      </Tabs>
    </div>
  );
}
